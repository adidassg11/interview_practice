#!/usr/bin/python

# Solution: O(n) runtime and O(n) mem for basic solution using memoization
# start: 10:59
# end: 11:16

from collections import defaultdict
import re

words = defaultdict(int) #k,v is word,count

# generated by multiple runs of http://watchout4snakes.com/wo4snakes/Random/RandomParagraph
book_text = "Inside an indistinguishable bed flashes the vital strategy. A jack assistant entails the mill. The cooled asset lurks beneath the countless norm. A folded smile paces. A supporting female weds throughout a pun. An exponential official addresses the lay orbital. The flying overview listens. A dramatic procedure shocks the cheerful steel. A jail chops the refrain. A faith stocks a crew across the dense rave. Throughout a conduct studies the elephant's deposit. The receipt weds. Does every sexist stare around the confidential requisite? How will the blurb quit our customer? The employer misinterprets each owing booklet outside a welcome. The directory hunts a sacrifice against another rose tube. The foreigner strains a workable peasant. A mimic gesture bites the automobile. The stair breaks the software. The biography groans above the motivating maker. The radius dies! When can a whale connect her naive beer? When will the cylinder punish the ruined shoulder? The here hook arrives throughout the extreme radius. The protest nests against a wound pet. The fascist strikes. When will the intellectual negate a peculiar suspicion? The booked agony tolls the percent dead. Next to the crunch recovers the supreme. Our mania mends behind a sea. My stroke exercises in the nastiest anarchy. The lyric helicopter arches another dumped theology. The tea solos! Each temporary helmet charges the activating therapy. The sensitive mixture rules inside a documented defense. "

# Considerations: caps? apostrophe (for contraction, or posession)? plurals? typos?
#    Text slightly changing in the future? Map reduce / parallel processing? sorting? integers?
# Go with the barebones for now...

def fill_dict(text, d):
    for word in text.strip().split():
        clean_word = re.sub('\W+','', word) # this is an important case, removes punctuation but also apostrophes which might be bad
        if clean_word != word:
            print 'cleaned %s to %s' % (word, clean_word)
        d[clean_word] += 1

def get_word_count(word):
    print 'Word count for \'%s\' is %s' % (word, str(words[word]))

fill_dict(book_text, words)
print words

print 'SORTED======='
import operator
sorted_words = sorted(words.items(), key=operator.itemgetter(1))
print sorted_words

get_word_count('rave')
get_word_count('awefawef')
get_word_count('The')
